// SLIM BURN IN WITH TREE SEQUENCE RECORDING FOR 10N GENERATIONS
initialize() {
	
	initializeTreeSeq(checkCoalescence=T); // intialise tree sequence recording
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 1);} // simulation idenifier
	
	defineConstant("startTime", time()); // simulation start time
	
	defineGlobal("N", 1e4); // scaled population size
	
	defineConstant("sequenceLength", 1e6); // sequence length
	
	initializeMutationRate(0); // neutral mutation rate
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	initializeGenomicElementType("g1", m1, 1.0);
	
	initializeGenomicElement(g1, 0, sequenceLength);
	
	initializeRecombinationRate(1e-6); // scaled recombination rate
}

// create a population of N individuals
1 early() {
	sim.addSubpop("p1", N);
}


100000 late() {
	// output tree sequence
	sim.treeSeqOutput(paste0("~/2023_popgen_benchmarking/burnin_ts_", sim_run,".trees"));
	
	//record memory usage
	mem = (usage(peak=T))*1024*1024;
	catn(mem);
	coalecense = sim.treeSeqCoalesced(); //check and print if lineages have coalesced
	catn(coalecense);
	
	defineConstant("endTime", time()); // simualtion end time
	
	// write text file of resource usage
	writeFile("~/2023_popgen_benchmarking/burnin_benchmarking_slim_ts.txt", paste(startTime, endTime, mem, sep="\t"), append=T);
}
