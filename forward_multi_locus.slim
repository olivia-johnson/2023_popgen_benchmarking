
initialize() {
	
	defineConstant("GenomeSize", 1e6);  // genome size
	
	defineConstant("s", 1); // selection coefficient
	
	defineConstant("n", 1e4); //  scaled population size
	
	defineConstant("d", 0.6);  //  dominance coefficient
	
	defineConstant("y", 4);  //  value for epistasis
	
	defineConstant("g_s", 10);  // generations per summer
	
	defineConstant("g_w", 10);  // generations per winter 
	
	defineConstant("g", (g_s + g_w));  // generations per seasonal cycle     
	
	defineConstant("mut", 0.0); // neutral mutation rate
	
	defineConstant("rr", 1e-6); // scaled recombination rate
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 1);} // simulation identifier
	
	if (!exists("fit"))
	{defineConstant("fit",1);} //if fit = 0 fitness function switched off
	
	initializeMutationRate(mut);
	
	initializeRecombinationRate(rr);
	
	initializeMutationType("m1", 0.0, "f", 0.0);  // seasonal mutations
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, GenomeSize-1);
	
	m1.color = "pink";
	m1.convertToSubstitution = F;
	
	initializeTreeSeq(); // initialise tree sequence recording
}


1 late() {
	// read in population from msprime burn-in
	sim.readFromPopulationFile(paste("~/2023_popgen_benchmarking/burnin_"+sim_run+".trees"));
	
	// position of mutations evenly distributed across sequence
	win = (GenomeSize)/10;
	win_mid = win/2;
	
	// drawn single selected mutation at each position in a single individual until 10 selected mutations have been included
	for (i in 1:10){
		pos = (i*win)-win_mid;
		
		target = sample(p0.genomes, asInteger(1));
		target.addNewDrawnMutation(m1, asInteger(pos));
	}
	// sample 100 individuals and dsve in tree sequence
	rInd= sample(p0.individuals, 100);
	sim.treeSeqRememberIndividuals(rInd);
}

// multilocus fluctuating selection fitness model from Wittmann et al. (2017) 
s1 fitnessEffect() { //summer
	if (fit == 0){
		return 1.0;
	} else{
		genomes=individual.genomes.mutationFrequenciesInGenomes();
		ns = sum(genomes==1); //homozygosity summer
		nhet = sum(genomes==0.5);  // heterozygosity
		nw = sum(genomes==0);//homozygosity winter
		if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
			zs = ns + (d * nhet);
			return (1 + zs)^y; }
		else { // winter
			zw = nw + (d * nhet);
			return (1 + zw)^y;}
	}
}


1:40000 early(){
	defineGlobal("gen", sim.cycle);
	defineGlobal("modValueSeason",integerMod(gen, g));
}


1:40000 late(){
	// track number of fixed mutations
	defineGlobal("fixed", sum(sim.mutationFrequencies(p0)==1));
	
	// binary 2-season environment 	
	if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
		
		if (exists("slimgui")) {cat("Summer\n");}
	}
	if (modValueSeason >= g_s) { //winter
		
		if (exists("slimgui")) {cat("Winter\n");}
	}
	// sample 100 individuals every 10,000 generations and save in tree sequence
	if (integerMod(gen, 10000)==0){
		rInd= sample(p0.individuals, 100);
		sim.treeSeqRememberIndividuals(rInd);}
}

// output while population in final generation (4N for selection to reach equilibrium)
40000 late() {
	// output tree sequence
	sim.treeSeqOutput(paste("~/2023_popgen_benchmarking/treeseq_multi_" + asString(sim_run) + ".trees"));
	
	// record peak memory usage
	mem = usage(peak=T);
	line4 = paste("Memory usage: "+ mem);
	catn(line4);
	
	// write memory usage to txt file
	writeFile("~/2023_popgen_benchmarking/forward_benchmarking_mem.txt", paste("ts", "multilocus", mem, sep="\t"), append=T);


}

